{
    "name": "Default Built-in Snippets",
    "description": "Default Built-in Snippets",
    "snippets": [
        {
            "id": "while",
            "prefix": "while",
            "code": "while ${1:condition} do \n\t${2}\nend",
            "description": "A while loop that executes a code block while a condition holds true"
        },
        {
            "id": "generic for loop",
            "prefix": "for_generic",
            "code": "for ${1:key}, ${2:value} in ${3:tableVar} do\n\t${4}\nend",
            "description": "A for loop that iterates over table."
        },
        {
            "id": "numeric for",
            "prefix": "for_numeric",
            "code": "for ${1:index} = ${2:startValue}, ${3:endValue}, ${4:incrementer} do\n\t${5}\nend",
            "description": "A for loop that executes a code block exp1 to exp2 times, (optionally) using exp3 to increment value. The default increment value is 1."
        },
        {
            "id": "if",
            "prefix": "if",
            "code": "if ${1:condition} then\n\t${2}\nend",
            "description": "An if statement that executes a code block if a condition is true"
        },
        {
            "id": "if else",
            "prefix": "if_else",
            "code": "if ${1:condition} then\n\t${2}\nelse\n\t${3}\nend",
            "description": "An if statement that executes one code block if a condition is true, and another code block if it is not."
        },
        {
            "id": "if elseif",
            "prefix": "if_elseif",
            "code": "if ${1:condition} then\n\t${2}\nelseif ${3:secondaryCondition} then\n\t${4}\nend",
            "description": "An if statement that executes one code block if a condition is true, or another code block if a secondary condition is true."
        },
        {
            "id": "function",
            "prefix": "function",
            "code": "function ${1:name}()\n\t${2}\nend",
            "description": "A definition of a function."
        },
        {
            "id": "class",
            "prefix": "class",
            "code": "${1:name} = {}\nfunction ${1}.new()\n\t${0}\nend",
            "description": "A generic class definition, using a table as the underlying data structure."
        },
        {
            "id": "Prototype-based class",
            "prefix": "class_prototype_based",
            "code": "local ${1:name} = {}\n${1}.__index = ${1}\n\nfunction ${1}.new()\n\tlocal self = {}\n\t${2}\n\treturn setmetatable(self, ${1})\nend",
            "description": "This prototype-based class defines class members, instance members, and metamethods in the same table and highlights Lua's strengths well."
        },
        {
            "id": "new",
            "prefix": "new",
            "code": "local ${1:var} = ${2:type}.new(${3:args})",
            "description": "A statement that creates a new instance of an object."
        },
        {
            "id": "GetService",
            "prefix": "GetService",
            "code": "local ${1:service} = game:GetService(\"${1}\")",
            "description": "Returns the service with the requested class name, creating it if it does not exist."
        },
        {
            "id": "repeat",
            "prefix": "repeat",
            "code": "repeat\n\t${1:statement}\nuntil(${2:condition})",
            "description": "A repeat...until loop is similar to a while loop, except that a do...while loop is guaranteed to execute at least one time."
        }
    ]
}
